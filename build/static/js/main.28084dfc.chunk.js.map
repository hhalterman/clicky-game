{"version":3,"sources":["components/Card/Card.js","components/Header/Header.js","components/Navbar/Navbar.js","App.js","index.js"],"names":["Card","_ref","clickHandler","id","image","name","react_default","a","createElement","className","src","alt","onClick","Header","Navbar","message","score","topScore","href","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","removeAnimation","element","document","getElementById","state","isGuessCorrect","classList","remove","addAnimation","isCorrect","add","toggleAnimation","setTimeout","handleSaveClick","tilez","tiles","tileClicked","filter","tile","clicked","handleIncorrectClick","handleCorrectClick","randomizeCharacters","setState","characters","sort","b","Math","random","maxScore","messageClass","resetGame","i","length","_this2","_this$state","Navbar_Navbar","Header_Header","map","Card_Card","key","Component","ReactDOM","render","src_App_0"],"mappings":"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","file":"static/js/main.28084dfc.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Card({ clickHandler, id, image, name }) {\n  return (\n    <div className=\"card-holder\">\n      <img\n        src={image}\n        alt={name}\n        className=\"card-select grow img-thumbnail m-2 pointer\"\n        onClick={() => clickHandler(id)}\n      />\n    </div>\n  );\n}\n\nexport default Card;\n","import React from \"react\";\n\nfunction Header() {\n  return (\n    <div className=\"align-items-center bg-header jumbotron header-hgt header-pad head-mar-top nav-shadow neon text-center yx-auto text-center\">\n      <h1 className=\"flicker-1 header-font\">\n        Click on an image to earn points,\n      </h1>\n      <h1 className=\"flicker-1 header-font\">\n        But don't click on any more than once!\n      </h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\n\nfunction Navbar({ message, score, topScore }) {\n  return (\n    <nav className=\"bg-nav fixed-top navbar nav-height nav-shadow p-0 tp-text\">\n      <ul className=\"row center list-inline m-0 nav-fill nav-height nav-width\">\n        <li className=\"col list-inline-item my-auto nav-calc-font p-0 m-0 text-center\">\n          <a className=\"nav-calc-font navbar-brand p-0 m-0 title-line-hgt\"\n            href=\"/\">\n            chilling adventures of  <br />\n            sabrina memory game\n          </a>\n        </li>\n        <li\n          id=\"animate-this\"\n          className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 text-center\"\n        >\n          {message}\n        </li>\n        <li className=\"col list-inline-item my-auto nav-calc-font m-0 p-0 score-li-width text-center\">\n          score: {score} | top score: {topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Navbar;\n","import \"./App.css\";\n\n// This actually imports the React node modules\nimport React, { Component } from \"react\";\n\nimport Card from \"./components/Card\";\nimport Header from \"./components/Header\";\nimport Navbar from \"./components/Navbar\";\nimport tiles from \"./tiles.json\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      isGuessCorrect: true,\n      tiles: tiles,\n      score: 0,\n      maxScore: 12,\n      topScore: 0,\n      message: \"CLICK AN IMAGE TO BEGIN!\"\n    };\n  }\n\n  /* Functions for handling animation */\n\n  // REMOVES animation CSS class\n  removeAnimation = () => {\n    // Grab the text at the top middle of the page\n    let element = document.getElementById(\"animate-this\");\n    // If the guess is correct...\n    if (this.state.isGuessCorrect) {\n      // ...remove the animation style of the correct guess\n      element.classList.remove(\"jello-vertical\");\n    }\n    // If the guess is incorrect...\n    if (!this.state.isGuessCorrect) {\n      // ...remove the animation style of the incorrect guess\n      element.classList.remove(\"shake-horizontal\");\n    }\n  };\n\n  // ADDS animation CSS class\n  addAnimation = isCorrect => {\n    // Grab the text at the top middle of the page\n    let element = document.getElementById(\"animate-this\");\n    // If the guess is correct...\n    if (isCorrect) {\n      // ...add the animation style of the correct guess\n      element.classList.add(\"jello-vertical\");\n    }\n    // If the guess is incorrect...\n    if (!isCorrect) {\n      // ...add the animation style of the incorrect guess\n      element.classList.add(\"shake-horizontal\");\n    }\n  };\n\n  // TOGGLES the CSS class for animation\n  toggleAnimation = isCorrect => {\n    // If the guess is correct...\n    if (isCorrect) {\n      // Add animation\n      this.addAnimation(true);\n      // Wait a split second and then remove it\n      setTimeout(this.removeAnimation, 500);\n    }\n    // If the guess is incorrect...\n    if (!isCorrect) {\n      // Add animation\n      this.addAnimation(false);\n      // Wait a split second and then remove it\n      setTimeout(this.removeAnimation, 500);\n    }\n  };\n\n  \n\n  /* game logic */\n\n  // Main click handler function\n  handleSaveClick = id => {\n    // Variable to hold the tiles state.\n    const tilez = this.state.tiles;\n    // Search through character tiles to find the one that matches the clicked id.\n    const tileClicked = tilez.filter(tile => tile.id === id);\n\n    // If the tile isn't clicked...\n    if (!tileClicked[0].clicked) {\n      // ...set it to now be clicked\n      tileClicked[0].clicked = true;\n      // ...call this function to register the correct guess\n      this.handleCorrectClick();\n      // ...add the bouncy animation for correct guess\n      this.toggleAnimation(true);\n\n      // ... randomize character tiles\n      this.randomizeCharacters(tilez);\n\n      this.setState({ tilez });\n    } else {\n      this.handleIncorrectClick();\n      this.toggleAnimation(false);\n    }\n  };\n\n  // Function to randomize the characters\n  randomizeCharacters = characters => {\n    characters.sort((a, b) => {\n      return 0.5 - Math.random();\n    });\n  };\n\n  // Handler for correct guesses/clicks\n  handleCorrectClick = () => {\n    this.setState({ isGuessCorrect: true });\n    if (this.state.score + 1 > this.state.topScore) {\n      this.setState({ topScore: this.state.topScore + 1 });\n    }\n    if (this.state.score + 1 >= this.state.maxScore) {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"CONGRATS! YOU WIN!\",\n        messageClass: \"correct\"\n      });\n    } else {\n      this.setState({\n        score: this.state.score + 1,\n        message: \"YOU GUESSED CORRECTLY!\",\n        messageClass: \"correct\"\n      });\n    }\n  };\n\n  // Handler for incorrect guesses/clicks\n  handleIncorrectClick = () => {\n    this.setState({\n      message: \"INCORRECT. PLAY AGAIN?\",\n      isGuessCorrect: false\n    });\n    // this.toggleIncorrectAnimation();\n    this.resetGame();\n  };\n\n  // Resets the game\n  resetGame = id => {\n    const tilez = this.state.tiles;\n    for (let i = 0; i < tilez.length; i++) {\n      tilez[i].clicked = false;\n    }\n    this.setState({ score: 0 });\n  };\n\n  /* Render and Return */\n\n  // Render the App component on the page\n  render() {\n    const { message, score, tiles, topScore } = this.state;\n    return (\n      <div className=\"fluid-container lodge h-100vh\">\n        <Navbar\n          className=\"row\"\n          score={score}\n          topScore={topScore}\n          message={message}\n        />\n        <Header className=\"bg-header row\" />\n\n        <div className=\"d-flex justify-content-center main-content mx-auto padding-main flex-wrap row\">\n          {tiles.map(({ id, name, image, clicked }) => (\n            <Card\n              key={id}\n              id={id}\n              name={name}\n              image={image}\n              clicked={clicked}\n              clickHandler={this.handleSaveClick}\n            />\n          ))}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import \"./index.css\";\n\nimport App from \"./App.js\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}